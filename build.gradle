/*
 * Copyright 2016 DGraph Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.1'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id "com.google.protobuf" version "0.9.1"
}

group = 'io.dgraph'
archivesBaseName = 'dgraph4j'
version = '21.12.0-tc'

def grpcVersion = '1.51.0'

java {
    withSourcesJar()
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = "com.google.protobuf:protoc:3.2.0"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'annotate_code'
                }
            }
      	}
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://nexus.tekstackapps.com/repository/maven-releases"
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    api 'org.slf4j:slf4j-api:2.0.5'
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    // javax.annotation is removed from the oracle java se 11, and requires explicit dependency
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // Specific slf4j bindings should not be included in the default (compile) scope.
    // See http://www.slf4j.org/faq.html#maven2.
    testImplementation 'org.slf4j:slf4j-simple:2.0.5'
    testImplementation "io.opencensus:opencensus-api:0.31.1"
    testImplementation "io.opencensus:opencensus-exporter-trace-jaeger:0.31.1"
    testImplementation "io.opencensus:opencensus-impl:0.31.1"
    // Used for unmarshalling a JSON GraphQL response
    testImplementation 'com.google.code.gson:gson:2.10'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    testImplementation 'org.testng:testng:7.6.1'
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java")
        sourceDirs += file("${projectDir}/src/generated/main/grpc")
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'dgraph4j'
                packaging = 'jar'
                artifactId = 'dgraph4j'
                description = 'Dgraph Java Client'
                url = 'https://github.com/dgraph-io/dgraph4j'

                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        name = 'Dgraph Labs'
                    }
                }
                scm {
                    connection = 'https://github.com/dgraph-io/dgraph4j.git'
                    url = 'https://github.com/dgraph-io/dgraph4j'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'nexus'
            url = "https://nexus.tekstackapps.com/repository/maven-releases"
            credentials(PasswordCredentials)
        }
    }
}

test {
    useTestNG()
    //testLogging.showStandardStreams = true
    systemProperties['org.slf4j.simpleLogger.log.io.dgraph.DgraphIntegrationTest'] = 'DEBUG'
}


task updateProto(type: Exec) {
    workingDir 'src/main/proto'
    commandLine 'wget', '-O', 'api.proto', 'https://raw.githubusercontent.com/dgraph-io/dgo/master/protos/api.proto'
}
